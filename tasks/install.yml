---

- name: KAFKA | Installing dependencies
  package:
    name: "{{ kafka_required_libs }}"
    state: present
  tags:
    skip_ansible_lint

- name: KAFKA | Ensure kafka group
  group:
    name: "{{ kafka_group }}"

- name: KAFKA | Ensure kafka user
  user:
    name: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    home: /bin/false

- name: KAFKA | Create install path
  file:
    path: "{{ kafka_install_path }}"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"

- name: KAFKA | Create data path
  file:
    path: "{{ kafka_data_path }}"
    mode: 0760
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_user }}"

- name: KAFKA | Check prev installation
  command: bash -c "ls {{ kafka_install_path }}/libs"
  register: kafka_check
  changed_when: false
  ignore_errors: true

- name: KAFKA | Check kafka version
  command: bash -c "ls {{ kafka_install_path }}/libs | grep 'kafka_{{ kafka_scala_version }}-{{ kafka_version }}.jar'"
  register: kafka_version_check
  changed_when: false
  ignore_errors: true

- name: KAFKA | Stop service
  systemd:
    name: kafka
    state: stopped
  when: kafka_check is success and (kafka_force_reinstall or kafka_version_check is failed or kafka_check.stdout == "")

- name: KAFKA | Remove old version
  file:
    path: "{{ kafka_install_path }}/{{ item }}"
    state: absent
  with_items: "{{ kafka_removeable_folders }}"
  when: kafka_check is success and (kafka_force_reinstall or kafka_version_check is failed or kafka_check.stdout == "")

- name: KAFKA | Untar kafka
  unarchive:
    extra_opts: ['--strip-components=1']
    src: "{{ kafka_sources_url }}"
    remote_src: true
    dest: "{{ kafka_install_path }}"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
  when: 'kafka_force_reinstall or kafka_version_check is failed or kafka_version_check.stdout == ""'
